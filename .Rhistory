setwd("C:\\Users\\Matthew Bazzo\\Documents\\Western Courses\\EngHBA3 - Year 5\\Term B\\Introductory Data Science\\Final Project")
starData <- read.csv("cumulative.csv", header = TRUE, na.strings = "")
setwd("C:\\Users\\Matthew Bazzo\\Documents\\Western Courses\\EngHBA3 - Year 5\\Term B\\Introductory Data Science\\Final Project")
starData <- read.csv("cumulative.csv", header = TRUE, na.strings = "")
kepler_df <- starData
head(starData)
starData
library(Amelia)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(rpart)
library(rpart.plot)
library(corrplot)
library(plotly)
library(rpart)
library(randomForest)
library(class)
library(e1071)
library(neuralnet)
levels(starData$koi_disposition)
levels(starData$koi_pdisposition)
Data1 <- subset(starData, koi_disposition =="CONFIRMED" & koi_pdisposition =="CANDIDATE")
Data1
Data2 <- subset(starData, koi_disposition =="CONFIRMED" & koi_pdisposition =="FALSE POSITIVE")
Data2
Data3 <- subset(starData, koi_disposition =="CANDIDATE" & koi_pdisposition =="CANDIDATE")
Data3
Data4 <- subset(starData, koi_disposition =="CANDIDATE" & koi_pdisposition =="FALSE POSITIVE")
Data4
Data5 <- subset(starData, koi_disposition =="FALSE POSITIVE" & koi_pdisposition =="CANDIDATE")
Data5
Data6 <- subset(starData, koi_disposition =="FALSE POSITIVE" & koi_pdisposition =="FALSE POSITIVE")
Data6
hist(starData$koi_score)
titleLabels <- names(starData)
titleLabels
head(kepler_df)
summary(kepler_df)
missmap(kepler_df)
kepler_df$koi_teq_err1 <- NULL
kepler_df$koi_teq_err2 <- NULL
kepler_df$rowid <- NULL
kepler_df$kepid <- NULL
missmap(kepler_df)
summary(kepler_df)
str(kepler_df)
# First extract only those rows where the planet is named.
named_planets_df <- subset(kepler_df, !is.na(kepler_name))
missmap(named_planets_df)
summary(named_planets_df$koi_teq)
summary(named_planets_df$koi_prad)
# Let's create labels for the binary star false positive flag
for (i in 1:dim(kepler_df)[1]) {
if (kepler_df$koi_fpflag_ss[i] == 0)
kepler_df$koi_fpflag_ss[i] <- "No binary star detected"
else
kepler_df$koi_fpflag_ss[i] <- "Probable binary star"
}
# Plot the dispositions according to Kepler data analysis
plot1 <- ggplot(kepler_df, aes(x = koi_fpflag_ss, fill = koi_pdisposition)) + geom_bar(position = "fill")
plot2 <- ggplot(kepler_df, aes(x = koi_fpflag_ss, fill = koi_disposition)) + geom_bar(position = "fill")
plot1
plot2
habit_df <- subset(kepler_df, koi_prad >= 0.5 & koi_prad <= 2.0 & koi_teq >= 273 & koi_teq <= 373 & koi_pdisposition == "CANDIDATE" & koi_score >= 0.4)
str(habit_df)
summary(habit_df)
head(habit_df)
# Temperature distribution
ggplot(habit_df, aes(x = koi_teq, fill = koi_disposition)) + geom_bar(binwidth = 9) + xlab("Effective Temperature (Kelvin)") + labs(title = "Temperature Distribution of Likely Habitable Planets\n") + geom_vline(xintercept=252, colour="orange", linetype = "longdash") + annotate("text", x = 267, y = 6, label = "Effective Temp\nof Earth")
# Radius distribution
ggplot(habit_df, aes(x = koi_prad, fill = koi_disposition)) + geom_bar(binwidth = 0.1) + xlab("Planetary Radius (Earth Radii)") + labs(title = "Planetary Radius Distribution of Likely Habitable Planets\n") + geom_vline(xintercept=1, colour="orange", linetype = "longdash") + annotate("text", x = 1.14, y = 6, label = "Earth Radius")
# koi_impact distribution
ggplot(habit_df, aes(x = koi_impact, fill = koi_disposition)) + geom_bar(binwidth = 0.1) + xlab("Sky-Projected Distance") + labs(title = "Sky-Projected Distance Distribution of Likely Habitable Planets\n")
ggplot(habit_df, aes(x = koi_prad, y = koi_teq, size = koi_score)) + geom_point(aes(color = koi_disposition)) + labs(title = "Plot of Likely Habitable Planets\n") + xlab("Planetary Radius (Earth Radii)") + ylab("Effective Temperature (Kelvin)")
# Let's take a dataset where we have sky-projected distance data, where the koi_score is fairly high, and where there is no FLASE POSITIVE label. The motivation for this is to remove any erroneous data associated with observations that are not likely to be planets.
test_df <- subset(kepler_df, !is.na(koi_impact) & koi_score > 0.5 & koi_disposition != "FALSE POSITIVE" & koi_disposition != "FALSE POSITIVE" & koi_impact <= 1.0)
ggplot(test_df, aes(x = koi_impact, fill = koi_disposition)) + geom_histogram(binwidth = 0.01) + xlab("Sky-Projected Distance") + labs(title = "Sky-Projected Distance Distribution of Likely Planets\n") + xlim(c(0,1))
summary(test_df$koi_impact)
print(mean(test_df$koi_impact))
print(sd(test_df$koi_impact))
test_corr <- cor(test_df[,c(11,17,20,23,26,29,30,33,36,39,42,45:47)])
temp_df <- habit_df[,c("koi_steff","koi_slogg","koi_srad")]
sun <- c(5778, 2.43775056282, 1.00)
temp_df[dim(temp_df)[1]+1,] <- sun
ggplot(temp_df, aes(x = koi_srad, y = koi_steff)) + geom_point(aes(colour = koi_slogg), size = 5) + scale_colour_gradient2(low = "#FF3300", mid = "white", high = "#663300", midpoint = 3.6) + xlab("Photospheric Radius of the Star (Normalized to Sun's Radius)") + ylab("Photospheric Temperature of the Star (Kelvin)") + labs(title = "Stars with Potentially Habitable Planets\n", color = "Base-10 Log\nof Surface Gravity\nAcceleration") + annotate("text", x = 1.06, y = 5778, label = "Sun") + geom_smooth(method='lm',formula=y~x) + annotate("text", x = 0.5, y = 6000, label = paste("R-square =", round(cor(temp_df$koi_srad,temp_df$koi_steff)^2, digits = 4)))
# Print the correlation
print(cor(temp_df$koi_srad,temp_df$koi_steff))
for (i in 1:dim(kepler_df)[1]) {
# Do a check for NAs
na_check <- is.na(kepler_df$koi_prad[i]) | is.na(kepler_df$koi_teq[i]) | is.na(kepler_df$koi_score[i]) | is.na(kepler_df$koi_pdisposition[i])
if (!na_check) {
if (kepler_df$koi_prad[i] >= 0.5 & kepler_df$koi_prad[i] <= 2.0 & kepler_df$koi_teq[i] >= 273 & kepler_df$koi_teq[i] <= 373 & kepler_df$koi_pdisposition[i] == "CANDIDATE" & kepler_df$koi_score[i] >= 0.4) {
kepler_df$koi_els[i] <- "Earth-like"
} else {
kepler_df$koi_els[i] <- "Not Earth-like"
}
}
}
el_df <- subset(kepler_df, koi_els == "Earth-like")
ggplot(kepler_df, aes(x = ra, y = dec)) + geom_point(aes(colour = koi_els), size = 1.5) + xlab("Right Ascension") + ylab("Declination") + labs(title = "Celestial Positioning of Observations\n")
setwd("C:\\Users\\Matthew Bazzo\\Documents\\Western Courses\\EngHBA3 - Year 5\\Term B\\Introductory Data Science\\Final Project")
starData <- read.csv("cumulative.csv", header = TRUE)
head(starData)
starData[starData ==""] <- NA
starData
naCol <-  which(colMeans(is.na(starData))>0)
naCol
naVal<- vector()
for (colnum in 1:50) {
naVal[colnum] <- sum(complete.cases(starData[colnum])==FALSE)
}
naVal
naVal<-naVal[naVal!=0]
naVal
NaData <- data.frame(naCol,naVal)
NaData
barplot(NaData$naVal,main = "Missing Value Counts", names.arg = NaData$naCol, cex.names = 0.5,
xlab="column names", col="red")
titleLabels[4]
titleLabels[7]
titleLabels[31]
titleLabels[32]
starData<- starData[-c(4,7,31,32)]
starData
levels(starData$koi_tce_delivname)
levels(starData$koi_tce_delivname)
dataA <- subset(starData,starData$koi_tce_delivname =="q1_q16_tce")
dataB <- subset(starData,starData$koi_tce_delivname =="q1_q17_dr24_tce")
dataC <- subset(starData,starData$koi_tce_delivname =="q1_q17_dr25_tce")
dim(dataA)[1]
dim(dataB)[1]
dim(dataC)[1]
starData$koi_tce_delivname[is.na(starData$koi_tce_delivname)] <- "q1_q17_dr25_tce"
starData$koi_tce_delivname <- factor(starData$koi_tce_delivname)
levels(starData$koi_tce_delivname)
starData$koi_tce_plnt_num <- as.factor(starData$koi_tce_plnt_num)
levels(starData$koi_tce_plnt_num)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(starData$koi_tce_plnt_num)
starData$koi_tce_plnt_num[is.na(starData$koi_tce_plnt_num)] <- "1"
for(i in 6:32){
starData
starData[is.na(starData[,i]), i] <- mean(starData[,i], na.rm = TRUE)
}
for(i in 35:46){
starData
starData[is.na(starData[,i]), i] <- mean(starData[,i], na.rm = TRUE)
}
sum(complete.cases(starData)=="FALSE")
starData <- starData[-c(1:3,5)]
starData$koi_fpflag_co <- as.factor(starData$koi_fpflag_co)
starData$koi_fpflag_ec <- as.factor(starData$koi_fpflag_ec)
starData$koi_fpflag_nt <- as.factor(starData$koi_fpflag_nt)
starData$koi_fpflag_ss <- as.factor(starData$koi_fpflag_ss)
starData$koi_tce_delivname <- as.factor(starData$koi_tce_delivname)
starData$koi_tce_plnt_num <- as.factor(starData$koi_tce_plnt_num)
starData <- starData[c(1:5,29,30,6:28,31:42)]
head(starData)
num_samples = dim(starData)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- subset(starData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(starData[testing, ])
names(trainingSet)
decTreeModel <- rpart(koi_disposition ~ .,data=trainingSet,method = "class")
prp(decTreeModel)
plotcp(decTreeModel)
pruned_decTreeModel = prune(decTreeModel, cp=0.012)
prp(pruned_decTreeModel)
predictedLabels<-predict(pruned_decTreeModel, testingSet, type = "class")
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$koi_disposition)
misclassification_rate = error/sizeTestSet
print(misclassification_rate)
RandForestModel <- randomForest(koi_disposition ~ .,data=trainingSet)
plot(RandForestModel)
legend("top", colnames(RandForestModel$err.rate),fill=1:3)
predictedLabels<-predict(RandForestModel, testingSet)
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$koi_disposition)
misclassification_rate = error/sizeTestSet
print(misclassification_rate)
starData
starData[8:42] <- scale(starData[8:42])
levels(starData$koi_tce_delivname)
levels(starData$koi_tce_delivname)[levels(starData$koi_tce_delivname)=="q1_q16_tce"] <- "1"
levels(starData$koi_tce_delivname)[levels(starData$koi_tce_delivname)=="q1_q17_dr24_tce"] <- "2"
levels(starData$koi_tce_delivname)[levels(starData$koi_tce_delivname)=="q1_q17_dr25_tce"] <- "3"
starData$koi_tce_delivname[starData$koi_tce_delivname== "q1_q16_tce"] <- "1"
starData$koi_tce_delivname[starData$koi_tce_delivname== "q1_q17_dr24_tce"] <- "2"
starData$koi_tce_delivname[starData$koi_tce_delivname== "q1_q17_dr25_tce"] <- "3"
starData
levels(starData$koi_tce_delivname)
num_samples = dim(starData)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- starData[training, ]
testing <- setdiff(1:num_samples,training)
testingSet <- starData[testing, ]
trainingfeatures <- subset(trainingSet, select=c(-koi_disposition))
traininglabels <- trainingSet$koi_disposition
testingfeatures <- subset(testingSet, select=c(-koi_disposition))
currentBestError = Inf
currentBestVar = -1
for(i in 1:30) {
predictedLabels = knn(trainingfeatures,testingfeatures,traininglabels,k=i)
error = sum(predictedLabels != testingSet$koi_disposition)
if(error < currentBestError){
print(paste0("We found a better k: ",i))
currentBestError = error
currentBestVar = i
}
}
currentBestVar
currentBestError / (dim(testingSet)[1])
AllErrors=c()
for(fold in 1:50)
{
#Get Training at Testing sets
num_samples = dim(starData)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- starData[training, ]
testing <- setdiff(1:num_samples,training)
testingSet <- starData[testing, ]
trainingfeatures <- subset(trainingSet, select=c(-koi_disposition))
traininglabels <- trainingSet$koi_disposition
testingfeatures <- subset(testingSet, select=c(-koi_disposition))
predictedLabels = knn(trainingfeatures,testingfeatures,traininglabels,k=currentBestVar)
error = sum(predictedLabels != testingSet$koi_disposition)
errorRate <- error / (dim(testingSet)[1])
AllErrors[fold] = errorRate
}
print(AllErrors)
AverageError = mean(AllErrors)
AverageError
starData$koi_disposition <- as.factor(starData$koi_disposition)
levels(starData$koi_disposition)
currentBestError = Inf
currentBestVar = -1
for(i in 15:20) {
svmModel <- svm(koi_disposition~., data=trainingSet, kernel="linear", cost=i)
error = sum(predictedLabels != testingSet$koi_disposition)
print(i)
if(error < currentBestError){
print(paste0("We found a better cost: ",i))
currentBestError = error
currentBestVar = i
}
}
currentBestVar
currentBestError / (dim(testingSet)[1])
currentBestError = Inf
currentBestVar = -1
for(i in 15:20) {
svmModel <- svm(koi_disposition~., data=trainingSet, kernel="polynomial", cost=i)
error = sum(predictedLabels != testingSet$koi_disposition)
print(i)
if(error < currentBestError){
print(paste0("We found a better cost: ",i))
currentBestError = error
currentBestVar = i
}
}
currentBestVar
currentBestError / (dim(testingSet)[1])
currentBestError = Inf
currentBestVar = -1
for(i in 15:20) {
svmModel <- svm(koi_disposition~., data=trainingSet, kernel="radial", cost=i)
error = sum(predictedLabels != testingSet$koi_disposition)
print(i)
if(error < currentBestError){
print(paste0("We found a better cost: ",i))
currentBestError = error
currentBestVar = i
}
}
currentBestVar
currentBestError / (dim(testingSet)[1])
head(starData)
levels(starData$koi_disposition)
levels(starData$koi_disposition)[levels(starData$koi_disposition)=="CANDIDATE"] <- "1"
levels(starData$koi_disposition)[levels(starData$koi_disposition)== "CONFIRMED"] <- "2"
levels(starData$koi_disposition)[levels(starData$koi_disposition)== "FALSE POSITIVE"] <- "3"
starData$koi_disposition[starData$koi_disposition=="CANDIDATE"] <- "1"
starData$koi_disposition[starData$koi_disposition== "CONFIRMED"] <- "2"
starData$koi_disposition[starData$koi_disposition== "FALSE POSITIVE"] <- "3"
starData$koi_disposition <- as.numeric(starData$koi_disposition)
str(starData)
starData$koi_fpflag_nt <- as.numeric(starData$koi_fpflag_nt)
starData$koi_fpflag_nt <- as.numeric(starData$koi_fpflag_nt)
starData$koi_fpflag_co <- as.numeric(starData$koi_fpflag_co)
starData$koi_fpflag_ec <- as.numeric(starData$koi_fpflag_ec)
starData$koi_fpflag_ss <- as.numeric(starData$koi_fpflag_ss)
starData$koi_tce_delivname <- as.numeric(starData$koi_tce_delivname)
starData$koi_tce_plnt_num <- as.numeric(starData$koi_tce_plnt_num)
str(starData)
num_samples = dim(starData)[1]
sampling.rate = 0.8
training <- sample(1:num_samples, sampling.rate * num_samples, replace=FALSE)
trainingSet <- subset(starData[training, ])
testing <- setdiff(1:num_samples,training)
testingSet <- subset(starData[testing, ])
n <- names(starData)
f <- as.formula(paste("koi_disposition ~", paste(n[!n %in% "koi_disposition"], collapse = " + ")))
f
nnModel <- neuralnet(f, data=trainingSet, hidden=c(7,5,3), linear.output=FALSE)
plot(nnModel)
predictedLabels <-compute(nnModel, testingSet[,2:42])
predictedLabels<-round(predictedLabels$net.result)
sizeTestSet = dim(testingSet)[1]
error = sum(predictedLabels != testingSet$koi_disposition)
misclassification_rate = error/sizeTestSet
print(misclassification_rate)
missmap(kepler_df)
# Remove features that are not likely to play a role in koi_score and/or are not direct measurements from transition phenomena.
kepler_cln_df <- kepler_df[,-c(1:5,34,35,48)]
# Convert fpflag_ss back to 0 amd 1 values
for (i in 1:dim(kepler_cln_df)[1]) {
if (kepler_cln_df$koi_fpflag_ss[i] == "No binary star detected")
kepler_cln_df$koi_fpflag_ss[i] <- 0
else
kepler_cln_df$koi_fpflag_ss[i] <- 1
}
# Make all fpflag features factors
for (i in 2:5) {
kepler_cln_df[,i] <- as.factor(kepler_cln_df[,i])
}
# Do manual check on NAs and Infs, just in case
na_count <- c()
inf_count <- c()
for (i in 1:dim(kepler_cln_df)[2]) {
na_count[i] <- sum(is.na(kepler_cln_df[,i]))
inf_count[i] <- sum(kepler_cln_df[,i ]== Inf, na.rm = TRUE)
}
man_cln_check <- data.frame(names(kepler_cln_df), na_count, inf_count)
# Perform mean imputation on the appropriate features
for (i in 6:dim(kepler_cln_df)[2]) {
# store the mean
col.mean <- mean(kepler_cln_df[,i], na.rm = TRUE)
# Loop through the rows to find the NAs
for (j in 1:dim(kepler_cln_df)[1]) {
if (is.na(kepler_cln_df[j,i])) {
# Impute with the mean
kepler_cln_df[j,i] <- col.mean
}
}
}
# Do manual check on NAs and Infs, just in case. Also check zeros in each column
na_count <- c()
inf_count <- c()
zero_count <- c()
for (i in 1:dim(kepler_cln_df)[2]) {
na_count[i] <- sum(is.na(kepler_cln_df[,i]))
inf_count[i] <- sum(kepler_cln_df[,i ]== Inf, na.rm = TRUE)
zero_count[i] <- sum(kepler_cln_df[,i ]== 0, na.rm = TRUE)
}
man_cln_check <- data.frame(names(kepler_cln_df), na_count, inf_count, zero_count)
# Remove zero measurements
kepler_cln_df <- subset(kepler_cln_df, koi_impact != 0)
kepler_cln_df <- subset(kepler_cln_df, koi_depth != 0)
kepler_cln_df <- subset(kepler_cln_df, koi_insol != 0)
# Manual check one more time
na_count <- c()
inf_count <- c()
zero_count <- c()
for (i in 1:dim(kepler_cln_df)[2]) {
na_count[i] <- sum(is.na(kepler_cln_df[,i]))
inf_count[i] <- sum(kepler_cln_df[,i ]== Inf, na.rm = TRUE)
zero_count[i] <- sum(kepler_cln_df[,i ]== 0, na.rm = TRUE)
}
man_cln_check <- data.frame(names(kepler_cln_df), na_count, inf_count, zero_count)
for (i in 1:dim(kepler_cln_df)[1]) {
# koi_period
kepler_cln_df$koi_period_err[i] <- max(abs(kepler_cln_df$koi_period_err1[i]), abs(kepler_cln_df$koi_period_err2[i]))/kepler_cln_df$koi_period[i]
# koi_time0bk
kepler_cln_df$koi_time0bk_err[i] <- max(abs(kepler_cln_df$koi_time0bk_err1[i]), abs(kepler_cln_df$koi_time0bk_err2[i]))/kepler_cln_df$koi_time0bk[i]
# koi_impact
kepler_cln_df$koi_impact_err[i] <- max(abs(kepler_cln_df$koi_impact_err1[i]), abs(kepler_cln_df$koi_impact_err2[i]))/kepler_cln_df$koi_impact[i]
# koi_duration
kepler_cln_df$koi_duration_err[i] <- max(abs(kepler_cln_df$koi_duration_err1[i]), abs(kepler_cln_df$koi_duration_err2[i]))/kepler_cln_df$koi_duration[i]
# koi_depth
kepler_cln_df$koi_depth_err[i] <- max(abs(kepler_cln_df$koi_depth_err1[i]), abs(kepler_cln_df$koi_depth_err2[i]))/kepler_cln_df$koi_depth[i]
# koi_prad
kepler_cln_df$koi_prad_err[i] <- max(abs(kepler_cln_df$koi_prad_err1[i]), abs(kepler_cln_df$koi_prad_err2[i]))/kepler_cln_df$koi_prad[i]
# koi_insol
kepler_cln_df$koi_insol_err[i] <- max(abs(kepler_cln_df$koi_insol_err1[i]), abs(kepler_cln_df$koi_insol_err2[i]))/kepler_cln_df$koi_insol[i]
# koi_steff
kepler_cln_df$koi_steff_err[i] <- max(abs(kepler_cln_df$koi_steff_err1[i]), abs(kepler_cln_df$koi_steff_err2[i]))/kepler_cln_df$koi_steff[i]
# koi_slogg
kepler_cln_df$koi_slogg_err[i] <- max(abs(kepler_cln_df$koi_slogg_err1[i]), abs(kepler_cln_df$koi_slogg_err2[i]))/kepler_cln_df$koi_slogg[i]
# koi_srad
kepler_cln_df$koi_srad_err[i] <- max(abs(kepler_cln_df$koi_srad_err1[i]), abs(kepler_cln_df$koi_srad_err2[i]))/kepler_cln_df$koi_srad[i]
}
for (i in c("koi_period_err1","koi_period_err2","koi_time0bk_err1","koi_time0bk_err2","koi_impact_err1","koi_impact_err2","koi_duration_err1","koi_duration_err2","koi_depth_err1","koi_depth_err2","koi_prad_err1","koi_prad_err2","koi_insol_err1","koi_insol_err2","koi_steff_err1","koi_steff_err2","koi_slogg_err1","koi_slogg_err2","koi_srad_err1","koi_srad_err2")) {
kepler_cln_df[,i] <- NULL
}
# Prediciton set
kep_ks_pred <- subset(kepler_cln_df, is.na(kepler_cln_df$koi_score))
# Make prediciton file for koi_score. Use 'getwd()' to see where file was sent.
write.csv(kep_ks_pred, file = "koi_prediction_set.csv")
# Set for training and testing
kepler_ks_tt <- subset(kepler_cln_df, !is.na(kepler_cln_df$koi_score))
sample.rate = 0.8
num.samples = dim(kepler_ks_tt)[1]
train.rows <- sample(1:num.samples,sample.rate*num.samples, replace = FALSE)
test.rows <- setdiff(1:dim(kepler_ks_tt)[1],train.rows)
kepler_ks_train <- kepler_ks_tt[train.rows,]
kepler_ks_test <- kepler_ks_tt[test.rows,]
head(kepler_ks_train)
head(kepler_ks_test)
kep_corr <- cor(kepler_ks_train[,6:dim(kepler_ks_train)[2]])
corrplot(kep_corr, type = "upper", method = "number")
sample.rate = 0.8
num.samples = dim(kepler_ks_tt)[1]
train.rows <- sample(1:num.samples,sample.rate*num.samples, replace = FALSE)
test.rows <- setdiff(1:dim(kepler_ks_tt)[1],train.rows)
kepler_ks_train <- kepler_ks_tt[train.rows,]
kepler_ks_test <- kepler_ks_tt[test.rows,]
head(kepler_ks_train)
head(kepler_ks_test)
kep_corr <- cor(kepler_ks_train[,6:dim(kepler_ks_train)[2]])
corrplot(kep_corr, type = "upper", method = "number")
sample.rate = 0.8
num.samples = dim(kepler_ks_tt)[1]
train.rows <- sample(1:num.samples,sample.rate*num.samples, replace = FALSE)
test.rows <- setdiff(1:dim(kepler_ks_tt)[1],train.rows)
kepler_ks_train <- kepler_ks_tt[train.rows,]
kepler_ks_test <- kepler_ks_tt[test.rows,]
head(kepler_ks_train)
head(kepler_ks_test)
kep_corr <- cor(kepler_ks_train[,6:dim(kepler_ks_train)[2]])
corrplot(kep_corr, type = "upper", method = "number")
install.packages('Amelia')
install.packages("Amelia")
install.packages('Amelia')
install.packages('ggplot2')
install.packages('ggthemes')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
starData <- read.csv("cumulative.csv", header = TRUE, na.strings = "")
kepler_df <- starData
head(starData)
starData
